import 'server-only';

import type { LanguageModel } from 'ai';
import { generateText } from 'ai';
import { myProvider } from '@/lib/ai/providers';
import type { DealAIContextParams, FormatDealContextOptions, DealAIContext } from './deal_context_types';
import { getDealAIContext, formatDealContextForLLM } from './deal_context_builder';
import { ChatSDKError } from '@/lib/errors';

/**
 * Parameters for the `generateStandardizedAIDealResponse` utility function.
 */
export interface StandardizedAIDealResponseParams {
  /** Parameters to fetch the deal AI context, passed to `getDealAIContext`. */
  dealContextParams: DealAIContextParams;
  /** Optional parameters to customize context formatting, passed to `formatDealContextForLLM`. */
  formatContextOptions?: FormatDealContextOptions;
  /**
   * A function that takes the formatted LLM context string (and optionally the raw `DealAIContext` object)
   * and returns the final prompt string to be sent to the LLM.
   */
  promptBuilder: (formattedLLMContext: string, rawDealAIContext?: DealAIContext) => string;
  /** Optional AI model to use. Defaults to `myProvider.languageModel('chat-model')`. */
  model?: LanguageModel;
}

/**
 * Represents the standardized response structure from `generateStandardizedAIDealResponse`.
 */
export interface StandardizedAIDealResponse {
  /** Indicates whether the overall operation was successful. */
  success: boolean;
  /** The text generated by the LLM if successful. */
  text?: string;
  /** An error message if the operation failed at any stage. */
  error?: string;
}

/**
 * A reusable server-side utility function to encapsulate the common logic of
 * fetching deal context, formatting it, constructing a feature-specific prompt,
 * and invoking the LLM.
 *
 * @param {StandardizedAIDealResponseParams} params - The parameters for the AI interaction.
 * @returns {Promise<StandardizedAIDealResponse>} A promise that resolves to an object
 *          indicating success or failure, along with the generated text or an error message.
 *
 * @example
 * ```typescript
 * // In a server action:
 * // import { generateStandardizedAIDealResponse } from '@/lib/ai/utils';
 * // import type { DealAIContextParams, DealAIContext } from '@/lib/ai/deal_context_types';
 *
 * // async function myAIServerAction(userId: string, dealId: string, userQuestion: string) {
 * //   const dealContextParams: DealAIContextParams = { userId, dealId, includeTranscripts: true };
 * //
 * //   const result = await generateStandardizedAIDealResponse({
 * //     dealContextParams,
 * //     promptBuilder: (formattedContext, rawContext) => {
 * //       // Use formattedContext and optionally rawContext to build a specific prompt
 * //       return `Based on the following context:\n${formattedContext}\n\nAnswer this question: ${userQuestion}`;
 * //     },
 * //     // formatContextOptions: { transcriptFormat: 'summary' }, // Optional
 * //     // model: myProvider.languageModel('specific-model'), // Optional
 * //   });
 * //
 * //   if (result.success) {
 * //     console.log("AI Response:", result.text);
 * //     return { success: true, data: result.text };
 * //   } else {
 * //     console.error("AI Error:", result.error);
 * //     return { success: false, error: result.error };
 * //   }
 * // }
 * ```
 */
export async function generateStandardizedAIDealResponse(
  params: StandardizedAIDealResponseParams,
): Promise<StandardizedAIDealResponse> {
  const {
    dealContextParams,
    formatContextOptions,
    promptBuilder,
    model = myProvider.languageModel('chat-model'), // Default model
  } = params;

  // Implementation for SS-2, SS-3, SS-4, SS-5 will go here.
  // For now, this is the basic structure for SS-1.

  try {
    // --- Story SS-2: Implement Deal Context Fetching and Formatting ---
    const rawDealAIContext = await getDealAIContext(dealContextParams);

    if (!rawDealAIContext) {
      return {
        success: false,
        error: 'Failed to retrieve deal context. The deal may not exist or user may not have permission.',
      };
    }

    const formattedLLMContext = formatDealContextForLLM(rawDealAIContext, formatContextOptions);

    if (!formattedLLMContext || formattedLLMContext.startsWith('Error:') || formattedLLMContext === 'No relevant context sections were included or available for formatting.') {
      // Check for specific "no content" message from formatDealContextForLLM
      if (formattedLLMContext === 'No relevant context sections were included or available for formatting.') {
        return { success: false, error: formattedLLMContext };
      }
      return {
        success: false,
        error: formattedLLMContext || 'Failed to format deal context for LLM.',
      };
    }

    // --- Story SS-3: Implement Prompt Construction ---
    const finalPrompt = promptBuilder(formattedLLMContext, rawDealAIContext);

    if (!finalPrompt || typeof finalPrompt !== 'string' || finalPrompt.trim() === '') {
      return {
        success: false,
        error: 'Prompt builder failed to return a valid prompt string.',
      };
    }

    // --- Story SS-4: Implement LLM Invocation using `generateText` ---
    // The 'model' is already destructured from params with a default.
    const llmResponse = await generateText({
      model: model, // Use the model from params (which has a default)
      prompt: finalPrompt,
    });

    // --- Story SS-5: Implement Success and Error Handling for LLM Call ---
    const { text: responseText } = llmResponse;

    if (responseText && responseText.trim() !== '') {
      return { success: true, text: responseText.trim() };
    } else {
      return { success: false, error: 'AI failed to generate a response.' };
    }

  } catch (error) {
    // Catch errors from getDealAIContext, formatDealContextForLLM, promptBuilder, or generateText
    console.error('Error in generateStandardizedAIDealResponse:', error);
    
    if (error instanceof ChatSDKError) { // Errors from our context fetching/formatting
      return { success: false, error: error.message };
    }
    
    // Handle errors from generateText (ai SDK) or other unexpected issues
    let errorMessage = 'An unexpected error occurred while interacting with the AI.';
    if (error instanceof Error) {
      // Check for common AI SDK error patterns, e.g., authentication
      if (error.message.toLowerCase().includes('authentication') || error.message.toLowerCase().includes('api key')) {
        errorMessage = 'AI authentication failed. Please check API key configuration.';
      } else {
        errorMessage = error.message;
      }
    }
    return { success: false, error: errorMessage };
  }
}
