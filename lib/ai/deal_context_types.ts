import type { Deal, Transcript, ActionItem, Contact } from '@/lib/db/schema';
import type { ContactWithRole } from '@/lib/db/queries';

/**
 * @interface DealAIContextParams
 * Parameters required to fetch the deal AI context.
 */
export interface DealAIContextParams {
  /**
   * The unique identifier for the deal.
   */
  dealId: string;

  /**
   * The unique identifier of the user requesting the context.
   * Used for authorization purposes.
   */
  userId: string;

  // Placeholders for future optional params as per Story 1.1.1,
  // which will be fully defined and implemented in Phase 3.

  /**
   * Optional array of specific transcript IDs to include.
   * If provided, only these transcripts will be fetched.
   * @default undefined (all transcripts for the deal are fetched, subject to other limits)
   */
  transcriptIds?: string[];

  /**
   * Optional limit on the number of transcripts to include.
   * If provided, a subset of transcripts (e.g., the newest) will be returned.
   * @default undefined (no specific limit, all fetched transcripts are included)
   */
  limitTranscripts?: number;

  /**
   * Optional flag to include contact details in the context.
   * @default true (contacts are included)
   */
  includeContacts?: boolean;

  /**
   * Optional flag to include action item details in the context.
   * @default true (action items are included)
   */
  includeActionItems?: boolean;

  /**
   * Optional flag to include transcript details in the context.
   * @default true (transcripts are included)
   */
  includeTranscripts?: boolean;
}

/**
 * @interface DealAIContext
 * Represents the structured aggregated context for a deal,
 * intended for AI model consumption or other services.
 */
export interface DealAIContext {
  /**
   * Core details of the deal.
   */
  deal: Deal;

  /**
   * Array of transcripts associated with the deal.
   * This might be all transcripts or a subset based on DealAIContextParams.
   */
  transcripts: Transcript[];

  /**
   * Array of contacts associated with the deal, including their roles.
   * This might be all contacts or an empty array if excluded via DealAIContextParams.
   */
  contacts: ContactWithRole[];

  /**
   * Array of action items associated with the deal.
   * This might be all action items or an empty array if excluded via DealAIContextParams.
   */
  actionItems: ActionItem[];
}

/**
 * @interface FormatDealContextOptions
 * Optional parameters to customize the formatting of the deal context string
 * generated by `formatDealContextForLLM`.
 */
export interface FormatDealContextOptions {
  /**
   * Specifies how transcript content should be formatted.
   * - 'full': Includes the full content of each transcript.
   * - 'titles_only': Includes only the metadata (filename, date, time) for each transcript.
   * - 'summary': (Future enhancement) Would include a summarized version of transcripts. Currently defaults to 'full'.
   * @default 'full'
   */
  transcriptFormat?: 'full' | 'summary' | 'titles_only';

  /**
   * An array specifying which major sections of the context to include.
   * If undefined, all sections are included by default.
   * If defined, only sections listed in the array will be included in the output.
   * @default ['deal', 'contacts', 'transcripts', 'actionItems'] (all sections)
   */
  includeSections?: Array<'deal' | 'contacts' | 'transcripts' | 'actionItems'>;
}
